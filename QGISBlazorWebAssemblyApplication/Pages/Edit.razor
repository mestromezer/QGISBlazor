@page "/edit/{id:int}"
@inject IConfiguration configuration
@inject NavigationManager navigationManager
@inject HttpClient client
@inject ILogger<Edit> logger

<h1>Редактировать</h1>

<EditForm Model="@Model" class="row">
    <div class="row">
        <label class="col">Новая геометрия: </label>
        <InputFile @bind-Value="Model.Geom" class="col"/>
    </div>

    <div class="row">
        <label class="col">Новый адрес: </label>
        <InputText @bind-Value="Model.Address" class="col"/>
    </div>

    <button @onclick="Send" type="submit">Submit</button>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    private Building Model { get; set; }
    protected override async void OnInitialized()
    {
        Model = new Building();
        try
        {
            using (var request = new HttpRequestMessage(HttpMethod.Get, $"{configuration["apiUrl"]}/{id}"))
            {
                var response = await client.SendAsync(request);
                logger.LogInformation($"GET (id={id}) response status: {response.StatusCode}");
                Model = JsonProcessor<Building>.Parse(await response.Content.ReadAsStringAsync());
                if (Model == null) throw new Exception("Responsed Model eqauls null");
            }
        }
        catch (Exception ex)
        {
            logger.LogError("Edit page OnInitialized method occured error");
            throw ex;
        }
    }
    private async void Send()
    {
        var request = new HttpRequestMessage(HttpMethod.Put, $"{configuration["apiUrl"]}/");
        var tmp = JsonProcessor<Building>.ConvertToGeoJson(Model);
        request.Content = new StringContent(tmp, Encoding.UTF8,
                                    "application/json");
        logger.LogInformation(tmp);
        try
        {
            var response = await client.SendAsync(request);
            logger.LogInformation($"PUT response status: {response.StatusCode}");
        }
        catch (Exception ex)
        {
            logger.LogError("Edit page Send method occured error");
            logger.LogError(ex.Message);
            throw ex;
        }
        navigationManager.NavigateTo("/");
    }
}
