@page "/edit/{id:int}"
@inject IConfiguration configuration
@inject NavigationManager navigationManager
@inject HttpClient client
@inject ILogger<Edit> logger
@if (_model == null)
{
    <p><em>Поиск здания в базе...</em></p>
}
else
{
    <h1>Редактировать</h1>

    <EditForm Model="@_model" class="row">
        <div class="row">
            <label for="Geom" class="col">Новая геометрия: </label>
            <InputTextArea id="Geom" @bind-Value="_geometryAsText" class="col" />
        </div>

        <div class="row">
            <label for="Address" class="col">Новый адрес: </label>
            <InputText id="Address" @bind-Value="_model!.Address" class="col"/>
        </div>

        <button @onclick="Send" type="submit">Submit</button>
    </EditForm>
}

@code {
    [Parameter]
    public int id { get; set; }
    private string _geometryAsText { get; set; }
    private Building? _model { get; set; } = new();
    protected override async void OnInitialized()
    {
        try
        {
            using (var request = new HttpRequestMessage(HttpMethod.Get, $"{configuration["apiUrl"]}{id}"))
            {
                var response = await client.SendAsync(request);
                logger.LogInformation($"GET (id={id}) response status: {response.StatusCode}");
                _model = JsonProcessor<Building>.Parse(
                    await response.Content.ReadAsStringAsync()
                );
                if (_model == null) throw new Exception("Responsed Model eqauls null");
                base.OnInitialized();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            logger.LogError("Edit page OnInitialized method occured error");
            logger.LogError(ex.Message);
            throw;
        }
    }
    private async void Send()
    {
        using (var request = new HttpRequestMessage(HttpMethod.Put, configuration["apiUrl"]))
        {
            _model.Geom = JsonProcessor<Geometry>.Parse(_geometryAsText);
            var tmp = JsonProcessor<Building>.ConvertToGeoJson(_model);
            request.Content = new StringContent(
                tmp,
                Encoding.UTF8,
                "application/json"
            );
            try
            {
                var response = await client.SendAsync(request);
                logger.LogInformation($"PUT response status: {response.StatusCode}");
            }
            catch (Exception ex)
            {
                logger.LogError("Edit page Send method occured error");
                logger.LogError(ex.Message);
                throw;
            }
            navigationManager.NavigateTo("/",true);
        }
    }
}
