@page "/"
@inject HttpClient client
@inject NavigationManager navigationManager
@inject ILogger<Index> logger
@inject IConfiguration configuration
<PageTitle>Здания</PageTitle>
<h1>Панель управления</h1>
<TableControlPanel />
<h1>Списко зданий</h1>
<p>Данные получены от @configuration["apiUrl"]</p>
@if (_buildingsData == null)
{
    <p><em>Загрузка таблицы зданий...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Адресс</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in _buildingsData)
            {
                <tr>
                    <td>@data.ID</td>
                    <td>@data.Address</td>
                    <td>
                        <a href='/edit/@data.ID' class="btn btn-outline-dark" role="button">Редактировать</a>
                        <button class="btn btn-outline-danger" type="button" @onclick="@(e=>Delete(data.ID))">Удалить</button>
                        <a href='/bufferzone/@data.ID' class="btn btn-outline-dark" role="button">S(5)</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code 
{
    private IList<Building> _buildingsData = default!;

    private async void Delete(int id)
    {
        try
        {
            using (var request = new HttpRequestMessage(HttpMethod.Delete, $"{configuration["apiUrl"]}Buildings/{id}"))
            {
                var response = await client.SendAsync(request);
                logger.LogInformation($"DELETE response status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            logger.LogError("Default page Delete method occured error");
            logger.LogError(ex.Message);
            throw;
        }
        navigationManager.NavigateTo("/", true);
    }

    protected override async Task OnInitializedAsync()
    {
        using (var request = new HttpRequestMessage(HttpMethod.Get, configuration["apiUrl"]))
        {
            request.Headers.Add("accept", "application/json");
            var response = await client.SendAsync(request);

            try
            {
                _buildingsData = JsonProcessor<List<Building>>.Parse(
                    await response.Content.ReadAsStringAsync()
                );

                logger.LogInformation($"GET response status: {response.StatusCode}");
            }
            catch (Exception ex)
            {
                logger.LogError("Index page OnInitializedAsync method occured error");
                logger.LogError(ex.Message);
                throw;
            }
        }
        await base.OnInitializedAsync();
    }

}
