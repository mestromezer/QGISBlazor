@page "/"
@using System.Text.Json
@inject HttpClient _client
@inject NavigationManager _navigationManager
@inject ILogger<FetchData> _logger

<PageTitle>Здания</PageTitle>

<h1>Панель управления</h1>

<TableControlPanel />

<h1>Списко зданий</h1>

<p>Данные получены от QGISDataApi</p>

@if (_buildingsData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Адресс</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in _buildingsData)
            {
                <tr>
                    <td>@data.ID</td>
                    <td>@data.Address</td>
                    <td>
                        <a href='/edit/@data.ID' class="btn btn-outline-dark" role="button">Edit</a>
                        <a href='/delete/@data.ID' class="btn btn-outline-danger" role="button">Delete</a>
                        <button type="button" @onclick="@(e=>Delete(data.ID))">Удалить нафик</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code 
{
    IList<Building> _buildingsData = default!;

    private async void Delete(int id)
    {
        try
        {
            using (var request = new HttpRequestMessage(HttpMethod.Delete, $"https://localhost:7066/{id}"))
            {

                var response = await _client.SendAsync(request);
                _logger.LogInformation($"DELETE response status: {response.StatusCode}");

            }
        }
        catch (Exception ex)
        {
            _logger.LogError("Default page Delete method occured error");
            throw ex;
        }
        _navigationManager.NavigateTo("/", true);
    }

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://localhost:7066/QGIS"
        );
        request.Headers.Add("accept", "application/json");
        var response = await _client.SendAsync(request);

        _logger.LogInformation($"Status code: {response.StatusCode}");

        try
        {
            _buildingsData = await response.Content.ReadFromJsonAsync<List<Building>>();
            _logger.LogInformation($"Loaded table from response as JSON: {DateTime.Now}");
        }
        catch (Exception ex) {
            _logger.LogError("FetchData page OnInitializedAsync method occured error");
            _logger.LogError(ex.Message);
        }
    }

}
